// Code generated by go-swagger; DO NOT EDIT.

package actor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"filmoteka_server/models"
)

// GetAllActorsHandlerFunc turns a function with the right signature into a get all actors handler
type GetAllActorsHandlerFunc func(GetAllActorsParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAllActorsHandlerFunc) Handle(params GetAllActorsParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// GetAllActorsHandler interface for that can handle valid get all actors params
type GetAllActorsHandler interface {
	Handle(GetAllActorsParams, *models.Principal) middleware.Responder
}

// NewGetAllActors creates a new http.Handler for the get all actors operation
func NewGetAllActors(ctx *middleware.Context, handler GetAllActorsHandler) *GetAllActors {
	return &GetAllActors{Context: ctx, Handler: handler}
}

/*
	GetAllActors swagger:route GET /actors Actor getAllActors

Получить список всех актеров
*/
type GetAllActors struct {
	Context *middleware.Context
	Handler GetAllActorsHandler
}

func (o *GetAllActors) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetAllActorsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetAllActorsOKBodyItems0 get all actors o k body items0
//
// swagger:model GetAllActorsOKBodyItems0
type GetAllActorsOKBodyItems0 struct {

	// date of birthday
	// Format: date
	DateOfBirthday strfmt.Date `json:"date_of_birthday,omitempty"`

	// films
	Films []string `json:"films"`

	// gender
	// Enum: ["M","F"]
	Gender interface{} `json:"gender,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this get all actors o k body items0
func (o *GetAllActorsOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDateOfBirthday(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllActorsOKBodyItems0) validateDateOfBirthday(formats strfmt.Registry) error {
	if swag.IsZero(o.DateOfBirthday) { // not required
		return nil
	}

	if err := validate.FormatOf("date_of_birthday", "body", "date", o.DateOfBirthday.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get all actors o k body items0 based on context it is used
func (o *GetAllActorsOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllActorsOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllActorsOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetAllActorsOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
