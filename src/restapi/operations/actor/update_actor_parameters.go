// Code generated by go-swagger; DO NOT EDIT.

package actor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewUpdateActorParams creates a new UpdateActorParams object
//
// There are no default values defined in the spec.
func NewUpdateActorParams() UpdateActorParams {

	return UpdateActorParams{}
}

// UpdateActorParams contains all the bound params for the update actor operation
// typically these are obtained from a http.Request
//
// swagger:parameters updateActor
type UpdateActorParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: query
	*/
	BDate strfmt.Date
	/*
	  Required: true
	  In: body
	*/
	Body UpdateActorBody
	/*
	  Required: true
	  In: query
	*/
	Name string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUpdateActorParams() beforehand.
func (o *UpdateActorParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qBDate, qhkBDate, _ := qs.GetOK("b_date")
	if err := o.bindBDate(qBDate, qhkBDate, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body UpdateActorBody
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("body", "body", ""))
			} else {
				res = append(res, errors.NewParseError("body", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			ctx := validate.WithOperationRequest(r.Context())
			if err := body.ContextValidate(ctx, route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Body = body
			}
		}
	} else {
		res = append(res, errors.Required("body", "body", ""))
	}

	qName, qhkName, _ := qs.GetOK("name")
	if err := o.bindName(qName, qhkName, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindBDate binds and validates parameter BDate from query.
func (o *UpdateActorParams) bindBDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("b_date", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("b_date", "query", raw); err != nil {
		return err
	}

	// Format: date
	value, err := formats.Parse("date", raw)
	if err != nil {
		return errors.InvalidType("b_date", "query", "strfmt.Date", raw)
	}
	o.BDate = *(value.(*strfmt.Date))

	if err := o.validateBDate(formats); err != nil {
		return err
	}

	return nil
}

// validateBDate carries on validations for parameter BDate
func (o *UpdateActorParams) validateBDate(formats strfmt.Registry) error {

	if err := validate.FormatOf("b_date", "query", "date", o.BDate.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindName binds and validates parameter Name from query.
func (o *UpdateActorParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("name", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("name", "query", raw); err != nil {
		return err
	}
	o.Name = raw

	return nil
}
