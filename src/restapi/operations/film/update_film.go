// Code generated by go-swagger; DO NOT EDIT.

package film

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"filmoteka_server/models"
)

// UpdateFilmHandlerFunc turns a function with the right signature into a update film handler
type UpdateFilmHandlerFunc func(UpdateFilmParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateFilmHandlerFunc) Handle(params UpdateFilmParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// UpdateFilmHandler interface for that can handle valid update film params
type UpdateFilmHandler interface {
	Handle(UpdateFilmParams, *models.Principal) middleware.Responder
}

// NewUpdateFilm creates a new http.Handler for the update film operation
func NewUpdateFilm(ctx *middleware.Context, handler UpdateFilmHandler) *UpdateFilm {
	return &UpdateFilm{Context: ctx, Handler: handler}
}

/*
	UpdateFilm swagger:route PUT /films Film updateFilm

Изменить информацию о фильме
*/
type UpdateFilm struct {
	Context *middleware.Context
	Handler UpdateFilmHandler
}

func (o *UpdateFilm) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateFilmParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateFilmBody update film body
//
// swagger:model UpdateFilmBody
type UpdateFilmBody struct {

	// description
	// Max Length: 1000
	Description string `json:"description,omitempty"`

	// name
	// Max Length: 150
	Name string `json:"name,omitempty"`

	// rate
	// Maximum: 10
	// Minimum: 0
	Rate *float64 `json:"rate,omitempty"`

	// year
	Year int64 `json:"year,omitempty"`
}

// Validate validates this update film body
func (o *UpdateFilmBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateFilmBody) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("body"+"."+"description", "body", o.Description, 1000); err != nil {
		return err
	}

	return nil
}

func (o *UpdateFilmBody) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("body"+"."+"name", "body", o.Name, 150); err != nil {
		return err
	}

	return nil
}

func (o *UpdateFilmBody) validateRate(formats strfmt.Registry) error {
	if swag.IsZero(o.Rate) { // not required
		return nil
	}

	if err := validate.Minimum("body"+"."+"rate", "body", *o.Rate, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("body"+"."+"rate", "body", *o.Rate, 10, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update film body based on context it is used
func (o *UpdateFilmBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateFilmBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateFilmBody) UnmarshalBinary(b []byte) error {
	var res UpdateFilmBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
