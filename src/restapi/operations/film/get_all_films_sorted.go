// Code generated by go-swagger; DO NOT EDIT.

package film

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"filmoteka_server/models"
)

// GetAllFilmsSortedHandlerFunc turns a function with the right signature into a get all films sorted handler
type GetAllFilmsSortedHandlerFunc func(GetAllFilmsSortedParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAllFilmsSortedHandlerFunc) Handle(params GetAllFilmsSortedParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// GetAllFilmsSortedHandler interface for that can handle valid get all films sorted params
type GetAllFilmsSortedHandler interface {
	Handle(GetAllFilmsSortedParams, *models.Principal) middleware.Responder
}

// NewGetAllFilmsSorted creates a new http.Handler for the get all films sorted operation
func NewGetAllFilmsSorted(ctx *middleware.Context, handler GetAllFilmsSortedHandler) *GetAllFilmsSorted {
	return &GetAllFilmsSorted{Context: ctx, Handler: handler}
}

/*
	GetAllFilmsSorted swagger:route GET /films Film getAllFilmsSorted

Получить список всех фильмов с возможностью сортировки
*/
type GetAllFilmsSorted struct {
	Context *middleware.Context
	Handler GetAllFilmsSortedHandler
}

func (o *GetAllFilmsSorted) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetAllFilmsSortedParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetAllFilmsSortedOKBodyItems0 get all films sorted o k body items0
//
// swagger:model GetAllFilmsSortedOKBodyItems0
type GetAllFilmsSortedOKBodyItems0 struct {

	// description
	// Required: true
	// Max Length: 1000
	Description *string `json:"description"`

	// name
	// Required: true
	Name *string `json:"name"`

	// rating
	// Required: true
	// Maximum: 10
	// Minimum: 0
	Rating *float64 `json:"rating"`

	// year
	// Required: true
	Year *int64 `json:"year"`
}

// Validate validates this get all films sorted o k body items0
func (o *GetAllFilmsSortedOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRating(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllFilmsSortedOKBodyItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", o.Description); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", *o.Description, 1000); err != nil {
		return err
	}

	return nil
}

func (o *GetAllFilmsSortedOKBodyItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetAllFilmsSortedOKBodyItems0) validateRating(formats strfmt.Registry) error {

	if err := validate.Required("rating", "body", o.Rating); err != nil {
		return err
	}

	if err := validate.Minimum("rating", "body", *o.Rating, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("rating", "body", *o.Rating, 10, false); err != nil {
		return err
	}

	return nil
}

func (o *GetAllFilmsSortedOKBodyItems0) validateYear(formats strfmt.Registry) error {

	if err := validate.Required("year", "body", o.Year); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get all films sorted o k body items0 based on context it is used
func (o *GetAllFilmsSortedOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllFilmsSortedOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllFilmsSortedOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetAllFilmsSortedOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
