// Code generated by go-swagger; DO NOT EDIT.

package film

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// FindFilmOKCode is the HTTP code returned for type FindFilmOK
const FindFilmOKCode int = 200

/*
FindFilmOK Найдено

swagger:response findFilmOK
*/
type FindFilmOK struct {

	/*
	  In: Body
	*/
	Payload []*FindFilmOKBodyItems0 `json:"body,omitempty"`
}

// NewFindFilmOK creates FindFilmOK with default headers values
func NewFindFilmOK() *FindFilmOK {

	return &FindFilmOK{}
}

// WithPayload adds the payload to the find film o k response
func (o *FindFilmOK) WithPayload(payload []*FindFilmOKBodyItems0) *FindFilmOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the find film o k response
func (o *FindFilmOK) SetPayload(payload []*FindFilmOKBodyItems0) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FindFilmOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*FindFilmOKBodyItems0, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// FindFilmBadRequestCode is the HTTP code returned for type FindFilmBadRequest
const FindFilmBadRequestCode int = 400

/*
FindFilmBadRequest Не найдено

swagger:response findFilmBadRequest
*/
type FindFilmBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewFindFilmBadRequest creates FindFilmBadRequest with default headers values
func NewFindFilmBadRequest() *FindFilmBadRequest {

	return &FindFilmBadRequest{}
}

// WithPayload adds the payload to the find film bad request response
func (o *FindFilmBadRequest) WithPayload(payload string) *FindFilmBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the find film bad request response
func (o *FindFilmBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FindFilmBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
