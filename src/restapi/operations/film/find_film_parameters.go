// Code generated by go-swagger; DO NOT EDIT.

package film

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewFindFilmParams creates a new FindFilmParams object
//
// There are no default values defined in the spec.
func NewFindFilmParams() FindFilmParams {

	return FindFilmParams{}
}

// FindFilmParams contains all the bound params for the find film operation
// typically these are obtained from a http.Request
//
// swagger:parameters findFilm
type FindFilmParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: query
	*/
	Actor string
	/*
	  Required: true
	  Max Length: 1000
	  In: query
	*/
	Desc string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewFindFilmParams() beforehand.
func (o *FindFilmParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qActor, qhkActor, _ := qs.GetOK("actor")
	if err := o.bindActor(qActor, qhkActor, route.Formats); err != nil {
		res = append(res, err)
	}

	qDesc, qhkDesc, _ := qs.GetOK("desc")
	if err := o.bindDesc(qDesc, qhkDesc, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindActor binds and validates parameter Actor from query.
func (o *FindFilmParams) bindActor(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("actor", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("actor", "query", raw); err != nil {
		return err
	}
	o.Actor = raw

	return nil
}

// bindDesc binds and validates parameter Desc from query.
func (o *FindFilmParams) bindDesc(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("desc", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("desc", "query", raw); err != nil {
		return err
	}
	o.Desc = raw

	if err := o.validateDesc(formats); err != nil {
		return err
	}

	return nil
}

// validateDesc carries on validations for parameter Desc
func (o *FindFilmParams) validateDesc(formats strfmt.Registry) error {

	if err := validate.MaxLength("desc", "query", o.Desc, 1000); err != nil {
		return err
	}

	return nil
}
