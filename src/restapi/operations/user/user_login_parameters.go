// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewUserLoginParams creates a new UserLoginParams object
//
// There are no default values defined in the spec.
func NewUserLoginParams() UserLoginParams {

	return UserLoginParams{}
}

// UserLoginParams contains all the bound params for the user login operation
// typically these are obtained from a http.Request
//
// swagger:parameters userLogin
type UserLoginParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  Min Length: 5
	  In: query
	*/
	Password string
	/*
	  Required: true
	  Min Length: 5
	  In: query
	*/
	Username string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUserLoginParams() beforehand.
func (o *UserLoginParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qPassword, qhkPassword, _ := qs.GetOK("password")
	if err := o.bindPassword(qPassword, qhkPassword, route.Formats); err != nil {
		res = append(res, err)
	}

	qUsername, qhkUsername, _ := qs.GetOK("username")
	if err := o.bindUsername(qUsername, qhkUsername, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindPassword binds and validates parameter Password from query.
func (o *UserLoginParams) bindPassword(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("password", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("password", "query", raw); err != nil {
		return err
	}
	o.Password = raw

	if err := o.validatePassword(formats); err != nil {
		return err
	}

	return nil
}

// validatePassword carries on validations for parameter Password
func (o *UserLoginParams) validatePassword(formats strfmt.Registry) error {

	if err := validate.MinLength("password", "query", o.Password, 5); err != nil {
		return err
	}

	return nil
}

// bindUsername binds and validates parameter Username from query.
func (o *UserLoginParams) bindUsername(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("username", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("username", "query", raw); err != nil {
		return err
	}
	o.Username = raw

	if err := o.validateUsername(formats); err != nil {
		return err
	}

	return nil
}

// validateUsername carries on validations for parameter Username
func (o *UserLoginParams) validateUsername(formats strfmt.Registry) error {

	if err := validate.MinLength("username", "query", o.Username, 5); err != nil {
		return err
	}

	return nil
}
