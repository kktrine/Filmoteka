// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Film film
//
// swagger:model Film
type Film struct {

	// actors
	// Required: true
	Actors Actors `json:"actors"`

	// description
	// Required: true
	// Max Length: 1000
	Description *string `json:"description"`

	// name
	// Required: true
	// Max Length: 150
	Name *string `json:"name"`

	// rate
	// Required: true
	// Maximum: 10
	// Minimum: 0
	Rate *float64 `json:"rate"`

	// year
	// Required: true
	Year *int64 `json:"year"`
}

// Validate validates this film
func (m *Film) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Film) validateActors(formats strfmt.Registry) error {

	if err := validate.Required("actors", "body", m.Actors); err != nil {
		return err
	}

	if err := m.Actors.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("actors")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("actors")
		}
		return err
	}

	return nil
}

func (m *Film) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", *m.Description, 1000); err != nil {
		return err
	}

	return nil
}

func (m *Film) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 150); err != nil {
		return err
	}

	return nil
}

func (m *Film) validateRate(formats strfmt.Registry) error {

	if err := validate.Required("rate", "body", m.Rate); err != nil {
		return err
	}

	if err := validate.Minimum("rate", "body", *m.Rate, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("rate", "body", *m.Rate, 10, false); err != nil {
		return err
	}

	return nil
}

func (m *Film) validateYear(formats strfmt.Registry) error {

	if err := validate.Required("year", "body", m.Year); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this film based on the context it is used
func (m *Film) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Film) contextValidateActors(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Actors.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("actors")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("actors")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Film) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Film) UnmarshalBinary(b []byte) error {
	var res Film
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
