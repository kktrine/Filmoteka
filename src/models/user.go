// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User user
//
// swagger:model User
type User struct {

	// password
	// Min Length: 5
	Password string `json:"password,omitempty"`

	// user status
	// Enum: ["admin","user"]
	UserStatus string `json:"userStatus,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validatePassword(formats strfmt.Registry) error {
	if swag.IsZero(m.Password) { // not required
		return nil
	}

	if err := validate.MinLength("password", "body", m.Password, 5); err != nil {
		return err
	}

	return nil
}

var userTypeUserStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["admin","user"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userTypeUserStatusPropEnum = append(userTypeUserStatusPropEnum, v)
	}
}

const (

	// UserUserStatusAdmin captures enum value "admin"
	UserUserStatusAdmin string = "admin"

	// UserUserStatusUser captures enum value "user"
	UserUserStatusUser string = "user"
)

// prop value enum
func (m *User) validateUserStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userTypeUserStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *User) validateUserStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.UserStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateUserStatusEnum("userStatus", "body", m.UserStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user based on context it is used
func (m *User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
